package withings

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

type SleepDataField string
type SleepDataFields []SleepDataField

// String converts the slice of SleepDataFields into the string format expected by the API.
func (m SleepDataFields) String() string {
	v := make([]string, 0, len(m))
	for _, t := range m {
		v = append(v, string(t))
	}

	return strings.Join(v, ",")
}

const (
	SleepDataFieldHR      SleepDataField = "hr"
	SleepDataFieldRR      SleepDataField = "rr"
	SleepDataFieldSnoring SleepDataField = "snoring"
	SleepDataFieldSDNN1   SleepDataField = "sdnn_1"
	SleepDataFieldRMSSD   SleepDataField = "rmssd"
)

// Sleep is a record of sleep as defined by the Withings API.
type Sleep struct {
	StartDate int `json:"startdate"`
	EndDate   int `json:"enddate"`
	State     int `json:"state"`
	HR        map[int64]float64
	RR        map[int64]float64
	Snoring   map[int64]float64
	SDNN1     map[int64]float64
	RMSSD     map[int64]float64
}

// Sleeps is a slice of Sleep structs.
type Sleeps []Sleep

// GetSleepResp is the response type returned by the Withings API for are request for sleep data.
type GetSleepResp struct {
	Status   int64        `json:"status"`
	APIError string       `json:"error"`
	Body     GetSleepBody `json:"body"`
}

// GetSleepBody is the body of the response returned by the Withings API for are request for sleep data.
type GetSleepBody struct {
	Series Sleeps `json:"series"`
	More   bool   `json:"more"`
	Offset int64  `json:"offset"`
}

// GetSleepParam contains the parameters needed to request sleep data.
type GetSleepParam struct {
	// Specifies the data fields that should be returned for each activity.
	DataFields SleepDataFields

	// The start of the window of measurements to retrieve. This value is ignored if LastUpdate is provided.
	StartDate time.Time

	// The end of the window of the measurements to retrieve. This value is ignored if LastUpdate is provided.
	EndDate time.Time
}

// UpdateQuery updates the query provided with the parameters of this param.
func (p *GetSleepParam) UpdateQuery(q url.Values) url.Values {
	// Constructing the query parameters based on the param provided.
	q.Set("action", APIActionGetSleep)
	if len(p.DataFields) > 0 {
		q.Set("data_fields", p.DataFields.String())
	}

	q.Set("startdate", strconv.FormatInt(p.StartDate.Unix(), 10))

	q.Set("enddate", strconv.FormatInt(p.EndDate.Unix(), 10))

	return q
}

// GetSleep retrieves sleep data for the user represented by the token. Error will be non nil upon an internal
// or api error. If the API returned the error the response will contain the error.
func (c *Client) GetSleep(ctx context.Context, token AccessToken, param GetSleepParam) (*GetSleepResp, error) {

	// Construct authorized request to request data from the API.
	req, err := http.NewRequestWithContext(ctx, http.MethodPost, APISleepV2, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to build http request: %w", err)
	}
	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", token.AccessToken))

	// Updating the query with the parameters generated by the param provided.
	req.URL.RawQuery = param.UpdateQuery(req.URL.Query()).Encode()

	// Executing the request.
	resp, err := c.HttpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to execute request: %w", err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read body of request: %w", err)
	}

	var mResp GetSleepResp
	if err = json.Unmarshal(body, &mResp); err != nil {
		return nil, fmt.Errorf("failed to parse response: %w", err)
	}

	switch mResp.Status {
	case 0:
		return &mResp, nil
	default:
		return &mResp, fmt.Errorf("api returned an error: %s", mResp.APIError)
	}
}
