package withings

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"
)

type IntraDayActivityField string
type IntraDayActivityFields []IntraDayActivityField

// String converts the slice of IntraDayActivityFields into the string format expected by the API.
func (m IntraDayActivityFields) String() string {
	v := make([]string, 0, len(m))
	for _, t := range m {
		v = append(v, string(t))
	}

	return strings.Join(v, ",")
}

const (
	IntraDayActivityFieldSteps     IntraDayActivityField = "steps"
	IntraDayActivityFieldElevation IntraDayActivityField = "elevation"
	IntraDayActivityFieldCalories  IntraDayActivityField = "calories"
	IntraDayActivityFieldDistance  IntraDayActivityField = "distance"
	IntraDayActivityFieldStroke    IntraDayActivityField = "stroke"
	IntraDayActivityFieldPoolLap   IntraDayActivityField = "pool_lap"
	IntraDayActivityFieldDuration  IntraDayActivityField = "duration"
	IntraDayActivityFieldHeartRate IntraDayActivityField = "heart_rate"
	IntraDayActivityFieldSPO2Auto  IntraDayActivityField = "spo2_auto"
)

// IntraDayActivity is record of high frequency activity data.
type IntraDayActivity struct {
	DeviceID  string   `json:"deviceid"`
	Model     string   `json:"model"`
	ModelID   int      `json:"model_id"`
	Steps     *float64 `json:"steps"`
	Elevation *float64 `json:"elevation"`
	Calories  *float64 `json:"calories"`
	Distance  *float64 `json:"distance"`
	Stroke    *float64 `json:"stroke"`
	PoolLap   *float64 `json:"pool_lap"`
	Duration  *float64 `json:"duration"`
	HeartRate *float64 `json:"heart_rate"`
	Spo2Auto  *float64 `json:"spo2_auto"`
}

// IntraDayActivities is a map of IntraDayActivities indexed by their timestamp.
type IntraDayActivities map[int64]IntraDayActivity

// GetIntraDayActivityResp is the response type returned by the Withings API for are request for intra day activity data.
type GetIntraDayActivityResp struct {
	Status   int64                   `json:"status"`
	APIError string                  `json:"error"`
	Body     GetIntraDayActivityBody `json:"body"`
}

// GetIntraDayActivityBody is the body of the response returned by the Withings API for are request for intra day activity data.
type GetIntraDayActivityBody struct {
	Series IntraDayActivities `json:"series"`
	More   bool               `json:"more"`
	Offset int64              `json:"offset"`
}

// GetIntraDayActivityParam contains the parameters needed to request intra day activities.
type GetIntraDayActivityParam struct {

	// The start of the window of measurements to retrieve. This value is ignored if LastUpdate is provided.
	StartDate *time.Time

	// The end of the window of the measurements to retrieve. This value is ignored if LastUpdate is provided.
	EndDate *time.Time

	// Specifies the data fields that should be returned for each activity.
	DataFields IntraDayActivityFields
}

// UpdateQuery updates the query provided with the parameters of this param.
func (p *GetIntraDayActivityParam) UpdateQuery(q url.Values) url.Values {
	// Constructing the query parameters based on the param provided.
	q.Set("action", APIActionGetIntraDayActivity)
	q.Set("data_fields", p.DataFields.String())
	if p.StartDate != nil {
		q.Set("startdate", strconv.FormatInt(p.StartDate.Unix(), 10))
	}
	if p.EndDate != nil {
		q.Set("enddate", strconv.FormatInt(p.EndDate.Unix(), 10))
	}
	return q
}

// GetIntraDayActivity retrieves intra day activity measurements for the user represented by the token. Error will be
// non nil upon an internal or api error. If the API returned the error the response will contain the error.
func (c *Client) GetIntraDayActivity(ctx context.Context, token AccessToken, param GetIntraDayActivityParam) (*GetIntraDayActivityResp, error) {

	// Construct authorized request to request data from the API.
	req, err := http.NewRequestWithContext(ctx, http.MethodPost, APIPathGetV2Measure, nil)
	if err != nil {
		return nil, fmt.Errorf("failed to build http request: %w", err)
	}
	req.Header.Add("Authorization", fmt.Sprintf("Bearer %s", token.AccessToken))

	// Updating the query with the parameters generated by the param provided.
	req.URL.RawQuery = param.UpdateQuery(req.URL.Query()).Encode()

	// Executing the request.
	resp, err := c.HttpClient.Do(req)
	if err != nil {
		return nil, fmt.Errorf("failed to execute request: %w", err)
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("failed to read body of request: %w", err)
	}

	var mResp GetIntraDayActivityResp
	if err = json.Unmarshal(body, &mResp); err != nil {
		return nil, fmt.Errorf("failed to parse response: %w", err)
	}

	switch mResp.Status {
	case 0:
		return &mResp, nil
	default:
		return &mResp, fmt.Errorf("api returned an error: %s", mResp.APIError)
	}
}
